{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex justify-center items-center py-16 bg-creamy\"\n};\nconst _hoisted_2 = {\n  class: \"bg-white shadow-lg rounded-lg p-6 w-96\"\n};\nconst _hoisted_3 = {\n  class: \"text-center text-sm mt-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavbarPage = _resolveComponent(\"NavbarPage\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_NavbarPage), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Title \"), _cache[4] || (_cache[4] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-center mb-6\"\n  }, \"Log In\", -1 /* HOISTED */)), _createCommentVNode(\" Email Input \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.email = $event),\n    type: \"email\",\n    placeholder: \"Email\",\n    class: \"w-full border rounded-lg p-2 mb-4\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.email]]), _createCommentVNode(\" Password Input \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.password = $event),\n    type: \"password\",\n    placeholder: \"Password\",\n    class: \"w-full border rounded-lg p-2 mb-4\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.password]]), _createCommentVNode(\" Login Button \"), _createElementVNode(\"button\", {\n    onClick: $setup.handleLogin,\n    class: \"w-full bg-greeny text-white p-2 rounded-lg font-semibold\"\n  }, \" Log In \"), _createCommentVNode(\" Register Link \"), _createElementVNode(\"p\", _hoisted_3, [_cache[3] || (_cache[3] = _createTextVNode(\" Need an account? \")), _createVNode(_component_router_link, {\n    to: \"/register\",\n    class: \"text-red-500 font-semibold\"\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"Register\")])),\n    _: 1 /* STABLE */,\n    __: [2]\n  })]), _createCommentVNode(\" Uncomment for Google login \"), _createCommentVNode(\"\\r\\n      <div class=\\\"mt-4 text-center text-gray-500\\\">OR</div>\\r\\n      <button class=\\\"w-full border p-2 mt-3 flex items-center justify-center rounded-lg\\\">\\r\\n        <img src=\\\"@/assets/google-icon.png\\\" class=\\\"w-5 mr-2\\\" /> Sign In With Google\\r\\n      </button>\\r\\n      \")])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createVNode","_component_NavbarPage","_createElementVNode","_hoisted_1","_hoisted_2","_createCommentVNode","_cache","$event","$setup","email","type","placeholder","password","onClick","handleLogin","_hoisted_3","_createTextVNode","_component_router_link","to","default","_withCtx","_","__"],"sources":["C:\\Users\\USER\\scentify\\src\\components\\LoginPage.vue"],"sourcesContent":["<script setup>\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport axios from 'axios';\r\n\r\n// API endpoint\r\nconst API_URL = \"http://localhost:8080\";\r\nconst loginEndpoint = \"/api/auth/login\";\r\n\r\n// Reactivity with ref\r\nconst email = ref('');\r\nconst password = ref('');\r\nconst router = useRouter();\r\n\r\n// Handle login process\r\nasync function handleLogin() {\r\n  try {\r\n    const response = await axios.post(API_URL + loginEndpoint, {\r\n      email: email.value,\r\n      password: password.value,\r\n    });\r\n\r\n    // Simulate storing token in localStorage\r\n    const userData = response.data.data;\r\n    localStorage.setItem('token', userData.token);\r\n\r\n    // Redirect based on user role\r\n    if (userData.roles[0] === \"ROLE_ADMIN\") {\r\n      router.push(\"/admin\"); // Redirect to admin page\r\n    } else {\r\n      router.push(\"/\"); // Redirect to home page\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Login failed:\", error.response?.data || error.message);\r\n    alert(\"Invalid email or password\");\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <NavbarPage />\r\n  \r\n  <div class=\"flex justify-center items-center py-16 bg-creamy\">\r\n    <div class=\"bg-white shadow-lg rounded-lg p-6 w-96\">\r\n      \r\n      <!-- Title -->\r\n      <h2 class=\"text-2xl font-semibold text-center mb-6\">Log In</h2>\r\n\r\n      <!-- Email Input -->\r\n      <input \r\n        v-model=\"email\" \r\n        type=\"email\" \r\n        placeholder=\"Email\" \r\n        class=\"w-full border rounded-lg p-2 mb-4\"\r\n      />\r\n\r\n      <!-- Password Input -->\r\n      <input \r\n        v-model=\"password\" \r\n        type=\"password\" \r\n        placeholder=\"Password\" \r\n        class=\"w-full border rounded-lg p-2 mb-4\"\r\n      />\r\n\r\n      <!-- Login Button -->\r\n      <button \r\n        @click=\"handleLogin\" \r\n        class=\"w-full bg-greeny text-white p-2 rounded-lg font-semibold\"\r\n      >\r\n        Log In\r\n      </button>\r\n\r\n      <!-- Register Link -->\r\n      <p class=\"text-center text-sm mt-3\">\r\n        Need an account? \r\n        <router-link to=\"/register\" class=\"text-red-500 font-semibold\">Register</router-link>\r\n      </p>\r\n\r\n      <!-- Uncomment for Google login -->\r\n      <!--\r\n      <div class=\"mt-4 text-center text-gray-500\">OR</div>\r\n      <button class=\"w-full border p-2 mt-3 flex items-center justify-center rounded-lg\">\r\n        <img src=\"@/assets/google-icon.png\" class=\"w-5 mr-2\" /> Sign In With Google\r\n      </button>\r\n      -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n/* Custom Tailwind CSS */\r\n.bg-creamy {\r\n  background-color: #f8f8f8; /* Light background color */\r\n}\r\n\r\n.bg-greeny {\r\n  background-color: #28a745; /* Green color for the button */\r\n}\r\n\r\nbutton {\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #218838; /* Darker green when hovered */\r\n}\r\n\r\ninput {\r\n  background-color: #fafafa; /* Light input background */\r\n  border: 1px solid #ccc; /* Light border */\r\n}\r\n\r\ninput:focus {\r\n  border-color: #28a745; /* Green border on focus */\r\n  outline: none;\r\n}\r\n</style>\r\n"],"mappings":";;EA0COA,KAAK,EAAC;AAAkD;;EACtDA,KAAK,EAAC;AAAwC;;EA8B9CA,KAAK,EAAC;AAA0B;;;;uBAzEzCC,mBAAA,CAAAC,SAAA,SAwCEC,YAAA,CAAcC,qBAAA,GAEdC,mBAAA,CA4CM,OA5CNC,UA4CM,GA3CJD,mBAAA,CA0CM,OA1CNE,UA0CM,GAxCJC,mBAAA,WAAc,E,0BACdH,mBAAA,CAA+D;IAA3DL,KAAK,EAAC;EAAyC,GAAC,QAAM,sBAE1DQ,mBAAA,iBAAoB,E,gBACpBH,mBAAA,CAKE;IAtDR,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAkDiBC,MAAA,CAAAC,KAAK,GAAAF,MAAA;IACdG,IAAI,EAAC,OAAO;IACZC,WAAW,EAAC,OAAO;IACnBd,KAAK,EAAC;iDAHGW,MAAA,CAAAC,KAAK,E,GAMhBJ,mBAAA,oBAAuB,E,gBACvBH,mBAAA,CAKE;IA9DR,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA0DiBC,MAAA,CAAAI,QAAQ,GAAAL,MAAA;IACjBG,IAAI,EAAC,UAAU;IACfC,WAAW,EAAC,UAAU;IACtBd,KAAK,EAAC;iDAHGW,MAAA,CAAAI,QAAQ,E,GAMnBP,mBAAA,kBAAqB,EACrBH,mBAAA,CAKS;IAJNW,OAAK,EAAEL,MAAA,CAAAM,WAAW;IACnBjB,KAAK,EAAC;KACP,UAED,GAEAQ,mBAAA,mBAAsB,EACtBH,mBAAA,CAGI,KAHJa,UAGI,G,0BA5EVC,gBAAA,CAyE0C,oBAElC,IAAAhB,YAAA,CAAqFiB,sBAAA;IAAxEC,EAAE,EAAC,WAAW;IAACrB,KAAK,EAAC;;IA3E1CsB,OAAA,EAAAC,QAAA,CA2EuE,MAAQd,MAAA,QAAAA,MAAA,OA3E/EU,gBAAA,CA2EuE,UAAQ,E;IA3E/EK,CAAA;IAAAC,EAAA;QA8EMjB,mBAAA,gCAAmC,EACnCA,mBAAA,2RAKG,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}